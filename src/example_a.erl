%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.8
-module(example_a).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("example_a.hrl").
-include("gpb.hrl").



-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'MessageExcluded'{} ->
	  e_msg_MessageExcluded(Msg, TrUserData);
      #'MessageA'{} -> e_msg_MessageA(Msg, TrUserData)
    end.



e_msg_MessageExcluded(Msg, TrUserData) ->
    e_msg_MessageExcluded(Msg, <<>>, TrUserData).


e_msg_MessageExcluded(#'MessageExcluded'{id = F1,
					 name = F2, art_url = F3},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.

e_msg_MessageA(Msg, TrUserData) ->
    e_msg_MessageA(Msg, <<>>, TrUserData).


e_msg_MessageA(#'MessageA'{id = F1, name = F2,
			   art_url = F3},
	       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_string(TrF1, <<Bin/binary, 10>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case iolist_size(TrF3) of
	       0 -> B2;
	       _ -> e_type_string(TrF3, <<B2/binary, 26>>)
	     end
	   end
    end.



e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'MessageExcluded' ->
	  d_msg_MessageExcluded(Bin, TrUserData);
      'MessageA' -> d_msg_MessageA(Bin, TrUserData)
    end.



d_msg_MessageExcluded(Bin, TrUserData) ->
    dfp_read_field_def_MessageExcluded(Bin, 0, 0,
				       id(<<>>, TrUserData),
				       id(<<>>, TrUserData),
				       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_MessageExcluded(<<10, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_MessageExcluded_id(Rest, Z1, Z2, F1, F2, F3,
			       TrUserData);
dfp_read_field_def_MessageExcluded(<<18, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_MessageExcluded_name(Rest, Z1, Z2, F1, F2, F3,
				 TrUserData);
dfp_read_field_def_MessageExcluded(<<26, Rest/binary>>,
				   Z1, Z2, F1, F2, F3, TrUserData) ->
    d_field_MessageExcluded_art_url(Rest, Z1, Z2, F1, F2,
				    F3, TrUserData);
dfp_read_field_def_MessageExcluded(<<>>, 0, 0, F1, F2,
				   F3, _) ->
    #'MessageExcluded'{id = F1, name = F2, art_url = F3};
dfp_read_field_def_MessageExcluded(Other, Z1, Z2, F1,
				   F2, F3, TrUserData) ->
    dg_read_field_def_MessageExcluded(Other, Z1, Z2, F1, F2,
				      F3, TrUserData).

dg_read_field_def_MessageExcluded(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MessageExcluded(Rest, N + 7,
				      X bsl N + Acc, F1, F2, F3, TrUserData);
dg_read_field_def_MessageExcluded(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MessageExcluded_id(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
      18 ->
	  d_field_MessageExcluded_name(Rest, 0, 0, F1, F2, F3,
				       TrUserData);
      26 ->
	  d_field_MessageExcluded_art_url(Rest, 0, 0, F1, F2, F3,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MessageExcluded(Rest, 0, 0, F1, F2, F3,
					    TrUserData);
	    1 ->
		skip_64_MessageExcluded(Rest, 0, 0, F1, F2, F3,
					TrUserData);
	    2 ->
		skip_length_delimited_MessageExcluded(Rest, 0, 0, F1,
						      F2, F3, TrUserData);
	    5 ->
		skip_32_MessageExcluded(Rest, 0, 0, F1, F2, F3,
					TrUserData)
	  end
    end;
dg_read_field_def_MessageExcluded(<<>>, 0, 0, F1, F2,
				  F3, _) ->
    #'MessageExcluded'{id = F1, name = F2, art_url = F3}.

d_field_MessageExcluded_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_MessageExcluded_id(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
d_field_MessageExcluded_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_MessageExcluded(Rest2, 0, 0,
				       NewFValue, F2, F3, TrUserData).


d_field_MessageExcluded_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_MessageExcluded_name(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, TrUserData);
d_field_MessageExcluded_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_MessageExcluded(Rest2, 0, 0, F1,
				       NewFValue, F3, TrUserData).


d_field_MessageExcluded_art_url(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_MessageExcluded_art_url(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, TrUserData);
d_field_MessageExcluded_art_url(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_MessageExcluded(Rest2, 0, 0, F1, F2,
				       NewFValue, TrUserData).


skip_varint_MessageExcluded(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    skip_varint_MessageExcluded(Rest, Z1, Z2, F1, F2, F3,
				TrUserData);
skip_varint_MessageExcluded(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F1, F2, F3, TrUserData) ->
    dfp_read_field_def_MessageExcluded(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_length_delimited_MessageExcluded(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_MessageExcluded(Rest, N + 7,
					  X bsl N + Acc, F1, F2, F3,
					  TrUserData);
skip_length_delimited_MessageExcluded(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MessageExcluded(Rest2, 0, 0, F1, F2,
				       F3, TrUserData).


skip_32_MessageExcluded(<<_:32, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_MessageExcluded(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


skip_64_MessageExcluded(<<_:64, Rest/binary>>, Z1, Z2,
			F1, F2, F3, TrUserData) ->
    dfp_read_field_def_MessageExcluded(Rest, Z1, Z2, F1, F2,
				       F3, TrUserData).


d_msg_MessageA(Bin, TrUserData) ->
    dfp_read_field_def_MessageA(Bin, 0, 0,
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_MessageA(<<10, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_MessageA_id(Rest, Z1, Z2, F1, F2, F3,
			TrUserData);
dfp_read_field_def_MessageA(<<18, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_MessageA_name(Rest, Z1, Z2, F1, F2, F3,
			  TrUserData);
dfp_read_field_def_MessageA(<<26, Rest/binary>>, Z1, Z2,
			    F1, F2, F3, TrUserData) ->
    d_field_MessageA_art_url(Rest, Z1, Z2, F1, F2, F3,
			     TrUserData);
dfp_read_field_def_MessageA(<<>>, 0, 0, F1, F2, F3,
			    _) ->
    #'MessageA'{id = F1, name = F2, art_url = F3};
dfp_read_field_def_MessageA(Other, Z1, Z2, F1, F2, F3,
			    TrUserData) ->
    dg_read_field_def_MessageA(Other, Z1, Z2, F1, F2, F3,
			       TrUserData).

dg_read_field_def_MessageA(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MessageA(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, TrUserData);
dg_read_field_def_MessageA(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MessageA_id(Rest, 0, 0, F1, F2, F3, TrUserData);
      18 ->
	  d_field_MessageA_name(Rest, 0, 0, F1, F2, F3,
				TrUserData);
      26 ->
	  d_field_MessageA_art_url(Rest, 0, 0, F1, F2, F3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MessageA(Rest, 0, 0, F1, F2, F3,
				     TrUserData);
	    1 ->
		skip_64_MessageA(Rest, 0, 0, F1, F2, F3, TrUserData);
	    2 ->
		skip_length_delimited_MessageA(Rest, 0, 0, F1, F2, F3,
					       TrUserData);
	    5 ->
		skip_32_MessageA(Rest, 0, 0, F1, F2, F3, TrUserData)
	  end
    end;
dg_read_field_def_MessageA(<<>>, 0, 0, F1, F2, F3, _) ->
    #'MessageA'{id = F1, name = F2, art_url = F3}.

d_field_MessageA_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_MessageA_id(Rest, N + 7, X bsl N + Acc, F1, F2,
			F3, TrUserData);
d_field_MessageA_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F2, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_MessageA(Rest2, 0, 0, NewFValue, F2,
				F3, TrUserData).


d_field_MessageA_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_MessageA_name(Rest, N + 7, X bsl N + Acc, F1,
			  F2, F3, TrUserData);
d_field_MessageA_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F1, _, F3, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_MessageA(Rest2, 0, 0, F1, NewFValue,
				F3, TrUserData).


d_field_MessageA_art_url(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    d_field_MessageA_art_url(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, TrUserData);
d_field_MessageA_art_url(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, _, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bytes:Len/binary, Rest2/binary>> = Rest,
    NewFValue = binary:copy(Bytes),
    dfp_read_field_def_MessageA(Rest2, 0, 0, F1, F2,
				NewFValue, TrUserData).


skip_varint_MessageA(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, TrUserData) ->
    skip_varint_MessageA(Rest, Z1, Z2, F1, F2, F3,
			 TrUserData);
skip_varint_MessageA(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F1, F2, F3, TrUserData) ->
    dfp_read_field_def_MessageA(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


skip_length_delimited_MessageA(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData)
    when N < 57 ->
    skip_length_delimited_MessageA(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, TrUserData);
skip_length_delimited_MessageA(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MessageA(Rest2, 0, 0, F1, F2, F3,
				TrUserData).


skip_32_MessageA(<<_:32, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, TrUserData) ->
    dfp_read_field_def_MessageA(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).


skip_64_MessageA(<<_:64, Rest/binary>>, Z1, Z2, F1, F2,
		 F3, TrUserData) ->
    dfp_read_field_def_MessageA(Rest, Z1, Z2, F1, F2, F3,
				TrUserData).






merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'MessageExcluded'{} ->
	  merge_msg_MessageExcluded(Prev, New, TrUserData);
      #'MessageA'{} ->
	  merge_msg_MessageA(Prev, New, TrUserData)
    end.

merge_msg_MessageExcluded(#'MessageExcluded'{id = PFid,
					     name = PFname,
					     art_url = PFart_url},
			  #'MessageExcluded'{id = NFid, name = NFname,
					     art_url = NFart_url},
			  _) ->
    #'MessageExcluded'{id =
			   if NFid =:= undefined -> PFid;
			      true -> NFid
			   end,
		       name =
			   if NFname =:= undefined -> PFname;
			      true -> NFname
			   end,
		       art_url =
			   if NFart_url =:= undefined -> PFart_url;
			      true -> NFart_url
			   end}.

merge_msg_MessageA(#'MessageA'{id = PFid, name = PFname,
			       art_url = PFart_url},
		   #'MessageA'{id = NFid, name = NFname,
			       art_url = NFart_url},
		   _) ->
    #'MessageA'{id =
		    if NFid =:= undefined -> PFid;
		       true -> NFid
		    end,
		name =
		    if NFname =:= undefined -> PFname;
		       true -> NFname
		    end,
		art_url =
		    if NFart_url =:= undefined -> PFart_url;
		       true -> NFart_url
		    end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'MessageExcluded'{} ->
	  v_msg_MessageExcluded(Msg, ['MessageExcluded'],
				TrUserData);
      #'MessageA'{} ->
	  v_msg_MessageA(Msg, ['MessageA'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_MessageExcluded/3}).
v_msg_MessageExcluded(#'MessageExcluded'{id = F1,
					 name = F2, art_url = F3},
		      Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [art_url | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_msg_MessageA/3}).
v_msg_MessageA(#'MessageA'{id = F1, name = F2,
			   art_url = F3},
	       Path, _) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [id | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [name | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [art_url | Path])
    end,
    ok.

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.




get_msg_defs() ->
    [{{msg, 'MessageExcluded'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = art_url, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'MessageA'},
      [#field{name = id, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = art_url, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []}]}].


get_msg_names() -> ['MessageExcluded', 'MessageA'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('MessageExcluded') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = art_url, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('MessageA') ->
    [#field{name = id, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = art_url, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.8".

gpb_version_as_list() ->
    [3,26,8].
